package com.NIONetworking;

// NIO 는 New Input/Output 의 약자 
// IO는 스트림 기반이다. (단일방향, 입.출력 스트림으로 구분) Input/Output Stream을 생성해야한다. 
// NIO는 Channel 기반. 채널은 스트림과 달리 양방향으로 입력과 출력이 가능하다. (입.출력을 위한 별도의 채널을 만들 필요가 없다. )
// IO는 출력스트림이 1byte를 쓰면 입력스트림이 1byte를 읽는다. 이런 시스템은 대체로 느리다.
// 그래서, 퍼버를 사용해서 복수개의 바이트를 한꺼번에 입력받고 출력하는 것이 빠른 성능을 냄. 
// IO에서는 BufferedInputStream/ BufferedOutputStream 을 연결해서 사용한다.
// NIO 에서는 기본적으로 버퍼를 사용해서 입출력을 하기 때문에 IO보다는 입출력 성능이 좋다. 
// 채널은 버퍼에 저장된 데이터를 출력하고, 입력된 데이터를 버퍼에 저장한다. 
// NIO는 블로킹과 넌블로킹의 특징을 모두 가지고 있다. 블로킹(대기상태)
// NIO의 블로킹과 IO 블로킹의 차이점은 스레드를 인터럽트함으로써 빠져나올 수가 있다. 
// NIO의 넌블로킹은 입출력 작업준비가 완료된 채널만 선택해서 작업스레드가 처리함 -> 작업스레드가 블로킹되지 않는다. 
// NIO 넌블로킹의 핵심객체는 Multiplexor인 Selector 이다. 
// 셀렉터는 복수개의 채널 중에서 준비 완료된 채널을 선택하는 방법을 제공해준다. 


//NIO 를 선택하는 이유 (네트워크 프로그램 개발 시에)
// 불특정 다수의 클라이언트 연결 또는 멀티 파일들을 넌블로킹이나 비동기로 처리할 수 있기 때문에 과도한 스레드 생성을 피하고, 스레드를 효과적으로 재사용한다는 큰장점이 있음.
// 운영체제의 버퍼를 이용한 입출력이 가능하기에 입출력 성능이 향상된다. 
// 연결 클라이언트 수가 많고, 하나의 입출력 작업이 오래 걸리지 않는 경우에 사용하는 것이 좋음. 



public class ServerExample {
	
	
	public static void main(String[] args) {
		
	}
}
